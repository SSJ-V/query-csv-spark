from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import pandas as pd
import io
import os
import re

from langchain_ollama import ChatOllama
from langchain.agents import initialize_agent
from langchain.agents.agent_types import AgentType
from langchain_experimental.tools.python.tool import PythonAstREPLTool

# === FastAPI setup ===

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === Persistent CSV storage ===

UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# === Global state ===

state = {
    "csv_path": None,
    "agent_executor": None
}

# === Upload route ===

@app.post("/upload-csv")
async def upload_csv(file: UploadFile = File(...)):
    file_path = os.path.join(UPLOAD_DIR, file.filename)

    # Save file permanently
    with open(file_path, "wb") as f:
        content = await file.read()
        f.write(content)

    try:
        df = pd.read_csv(file_path)
    except Exception as e:
        return {"error": f"Failed to read CSV: {str(e)}"}

    if df.shape[1] == 0:
        return {"error": "No columns found in uploaded CSV."}

    state["csv_path"] = file_path

    # Print schema for debug
    print("\n=== CSV Uploaded ===")
    print(df.head())

    # Build Agent after successful upload
    state["agent_executor"] = build_agent(df)

    return {"status": "success", "columns": df.columns.tolist(), "rows": len(df)}

# === Query model ===

class Query(BaseModel):
    question: str

# === Agent builder ===

def build_agent(df: pd.DataFrame):
    repl_tool = PythonAstREPLTool()
    repl_tool.globals = {"df": df}

    schema_hint = "The dataset has these columns:\n"
    for col in df.columns:
        schema_hint += f"- {col}\n"

    llm = ChatOllama(
        base_url="http://localhost:11434",
        model="llama3",
        temperature=0.1,
        api_key="ollama"
    )

    agent_executor = initialize_agent(
        tools=[repl_tool],
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        agent_kwargs={
            "prefix": (
                "You are an expert pandas data analyst. You have full access to a pandas DataFrame named `df`.\n"
                f"{schema_hint}\n"
                "Carefully reason step-by-step. Use pandas code to analyze data where appropriate.\n"
                "Do NOT assume relationships unless present in columns. Only use data from CSV."
            ),
            "format_instructions": (
                "Use this format:\n"
                "Question: the input question\n"
                "Thought: reasoning\n"
                "Action: python_repl_ast\n"
                "Action Input: python code\n"
                "Observation: result\n"
                "...\n"
                "Final Answer: your final answer."
            )
        },
        verbose=True,
        handle_parsing_errors=True,
        max_iterations=20,
        max_execution_time=120
    )

    return agent_executor

# === Query route ===

@app.post("/ask")
async def ask_question(query: Query):
    if state["agent_executor"] is None or state["csv_path"] is None:
        return {"error": "No CSV uploaded or agent not initialized."}

    # Always reload the latest CSV before each question (safe & fresh)
    df = pd.read_csv(state["csv_path"])
    state["agent_executor"].tools[0].globals = {"df": df}

    print(f"\n=== New User Query: {query.question} ===")

    try:
        result = state["agent_executor"].invoke({"input": query.question})
        full_output = result["output"]

        print("\n--- Raw Agent Output ---")
        print(full_output)
        print("------------------------")

        # Extract Final Answer
        final_answer_match = re.search(r"Final Answer:\s*(.*)", full_output, re.IGNORECASE | re.DOTALL)
        if final_answer_match:
            final_answer = final_answer_match.group(1).strip()
            print(f"Extracted Final Answer: {final_answer}")
        else:
            sentences = re.split(r'[.\n]', full_output)
            sentences = [s.strip() for s in sentences if s.strip()]
            final_answer = sentences[-1] if sentences else full_output.strip()
            print(f"No 'Final Answer:' found. Fallback: {final_answer}")

        return {"query": query.question, "final_answer": final_answer}

    except Exception as e:
        print(f"Error: {e}")
        return {"error": str(e)}

# === Test route ===

@app.get("/")
def read_root():
    return {"status": "ok"}

new code

from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import pandas as pd
import io
import re
import os
from langchain_ollama import ChatOllama
from langchain.agents import initialize_agent
from langchain.agents.agent_types import AgentType
from langchain_experimental.tools.python.tool import PythonAstREPLTool

app = FastAPI()

# CORS setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Global state
state = {
    "df": None,
    "agent_executor": None,
    "repl_tool": None
}

class Query(BaseModel):
    question: str

def infer_column_description(colname):
    colname_lower = colname.lower()
    if any(keyword in colname_lower for keyword in ['id', 'match', 'game', 'student', 'invoice']):
        return "Unique identifier or reference."
    elif any(keyword in colname_lower for keyword in ['date', 'time', 'year', 'month']):
        return "Temporal information."
    elif any(keyword in colname_lower for keyword in ['team', 'company', 'org', 'school']):
        return "Organization name or group."
    elif any(keyword in colname_lower for keyword in ['player', 'batter', 'bowler', 'student', 'name']):
        return "Person name."
    elif any(keyword in colname_lower for keyword in ['run', 'score', 'grade', 'mark', 'revenue', 'amount']):
        return "Numeric value or measurement."
    elif any(keyword in colname_lower for keyword in ['is_', 'flag', 'bool', 'yes', 'no']):
        return "Boolean indicator."
    else:
        return "General information."

@app.post("/upload-csv")
async def upload_csv(file: UploadFile = File(...)):
    content = await file.read()
    try:
        df = pd.read_csv(io.StringIO(content.decode("utf-8")))
    except Exception as e:
        return {"error": f"Failed to read CSV: {str(e)}"}

    if df.shape[1] == 0:
        return {"error": "No columns found in uploaded CSV."}

    state["df"] = df

    # Generate schema hint dynamically
    schema_hint = "The dataset has the following columns:\n"
    for col in df.columns:
        dtype = str(df[col].dtype)
        description = infer_column_description(col)
        schema_hint += f"- '{col}' ({dtype}): {description}\n"

    print("\n=== CSV Uploaded ===")
    print(schema_hint)
    print(df.head())

    repl_tool = PythonAstREPLTool()
    repl_tool.globals = {"df": df}

    llm = ChatOllama(
        base_url="http://localhost:11434",
        model="llama3",
        temperature=0.1,
        api_key="ollama"
    )

    agent_executor = initialize_agent(
        tools=[repl_tool],
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        agent_kwargs={
            "prefix": (
                "You are an expert data analyst AI with access to a pandas dataframe `df` loaded from the uploaded CSV file.\n"
                "The dataframe columns and inferred descriptions are:\n"
                f"{schema_hint}\n"
                "Reason carefully and think step-by-step before answering.\n"
                "Only use Python code when needed to calculate answers.\n"
                "Do NOT assume relationships that are not directly present in the data unless clearly evident from the question and column names.\n"
                "You have no prior domain knowledge, you only know what the CSV provides."
            ),
            "format_instructions": (
                "Use this format:\n\n"
                "Question: the input question\n"
                "Thought: your reasoning\n"
                "Action: python_repl_ast\n"
                "Action Input: python code using df\n"
                "Observation: result of code\n"
                "...\n"
                "Final Answer: your final answer."
            )
        },
        verbose=True,
        handle_parsing_errors=True,
        max_iterations=20,
        max_execution_time=120,
    )

    state["agent_executor"] = agent_executor
    state["repl_tool"] = repl_tool

    return {"status": "success", "columns": df.columns.tolist(), "rows": len(df)}

@app.post("/ask")
async def ask_question(query: Query):
    if state["agent_executor"] is None or state["df"] is None:
        return {"error": "No CSV uploaded or agent not initialized."}

    print(f"\n=== New User Query: {query.question} ===")

    try:
        result = state["agent_executor"].invoke({"input": query.question})
        full_output = result["output"]

        print("\n--- Raw Agent Output ---")
        print(full_output)
        print("------------------------")

        # Extract Final Answer (fully cleaned version)
        final_answer_match = re.search(r"Final Answer:\s*(.*)", full_output, re.IGNORECASE | re.DOTALL)
        if final_answer_match:
            final_answer_raw = final_answer_match.group(1).strip()
            final_answer = re.split(r"Note:", final_answer_raw)[0].strip()
            print(f"Extracted Clean Final Answer: {final_answer}")
        else:
            sentences = re.split(r'[.\n]', full_output)
            sentences = [s.strip() for s in sentences if s.strip()]
            fallback_answer = next(
                (s for s in reversed(sentences) if "note" not in s.lower()),
                full_output.strip()
            )
            final_answer = fallback_answer
            print(f"No 'Final Answer:' found. Cleaned Fallback: {final_answer}")

        return {"query": query.question, "final_answer": final_answer}

    except Exception as e:
        print(f"Error: {e}")
        return {"error": str(e)}

@app.get("/")
def read_root():
    return {"status": "ok"}
